{"version":3,"file":"static/js/404.cf0780a1.chunk.js","mappings":"mUAEaA,EAAYC,EAAAA,EAAAA,IAAH,sOAWTC,EAAQD,EAAAA,EAAAA,GAAH,0GAOLE,EAAgBF,EAAAA,EAAAA,GAAH,iLAUbG,EAAeH,EAAAA,EAAAA,GAAH,wIAOZI,EAAgBJ,EAAAA,EAAAA,IAAH,2DAKbK,EAAgBL,EAAAA,EAAAA,EAAH,gO,sNCxCbM,EAAON,EAAAA,EAAAA,KAAH,+DAKJO,EAAQP,EAAAA,EAAAA,MAAH,2JASLQ,EAASR,EAAAA,EAAAA,OAAH,oI,mBCmGnB,EAlGe,WACb,OAAsCS,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAQF,EAAaG,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAc,OAAVJ,EAAJ,CAIA,IAAMK,EAAa,mCAAG,+GAGVC,EAAAA,EAAAA,IAAA,4DAlBA,mCAkBA,kBACkEN,IAJxD,8BAMhBO,KAAKC,QANW,UAQM,KANlBC,EAFY,QAQLC,OARK,uBAShBC,IAAAA,OAAAA,QAAwB,qCATR,0BAYZJ,EAAOE,EAASG,KACpB,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,eAAd,MAAiD,CAC/CF,GAAAA,EACAC,MAAOA,GAASC,EAChBC,YAHF,EAA8BA,YAA9B,IAMFpB,EAASW,GAnBS,kDAqBlBU,QAAQC,IAAR,MArBkB,0DAAH,qDAwBnBb,GA1BC,CA2BF,GAAE,CAACL,EAAOF,IAmBX,OACE,UAAC,KAAD,YACE,UAACT,EAAD,CAAM8B,SAfW,SAAAC,GACnBA,EAAMC,iBAEN,IAAIC,EAAQF,EAAMG,OAAOC,SAASC,OAAOH,MACzC5B,EAAe4B,GACfvB,EAAgB,CAAEC,MAAOsB,IACrBtB,GAA0B,KAAjBA,EAAM0B,OACjBf,IAAAA,OAAAA,QAAwB,wBAG1BjB,EAAe,GAChB,EAIG,WACE,SAACH,EAAD,CAAQoC,KAAK,SAAb,UACE,SAAC,MAAD,OAEF,SAACrC,EAAD,CACEqC,KAAK,OACLC,aAAa,MACbC,KAAK,SACLC,WAAS,EACTC,YAAY,0BACZT,MAAO7B,EACPuC,SA9BS,SAAC,GAAgB,IAAdT,EAAa,EAAbA,OAClB7B,EAAe6B,EAAOD,MACvB,OA+BI3B,IACC,SAAC,KAAD,UACGA,EAAMiB,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOE,EAAkB,EAAlBA,YACvB,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAMiB,GAAE,UAAKpB,GAAMqB,MAAO,CAAEC,KAAMjC,GAAlC,WACE,SAAC,KAAD,CACEkC,IACEpB,EAAW,yCAC2BA,GAClCqB,EAENC,IAAKxB,KAEP,SAAC,KAAD,UAAgBA,MATiCD,IADlCA,EActB,QAKV,C","sources":["pages/Home/HomeStyle.jsx","pages/Movies/MoviesStyle.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding: 16px;\n  margin: 12px 4px;\n  width: 100%;\n  border: 1px solid grey;\n  box-shadow: 2px 2px 5px 2px rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const Title = styled.h1`\n  margin-left: 32px;\n  font-size: 24px;\n  font-weight: 500;\n  color: #25202f;\n`;\n\nexport const PopMoviesList = styled.ul`\n  margin-top: 16px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  align-items: flex-end;\n  flex-grow: grow;\n  gap: 12px;\n`;\n\nexport const PopMovieItem = styled.li`\n  flex-grow: 1;\n  width: 200px;\n  border: 1px solid grey;\n  box-shadow: 2px 2px 5px 2px rgba(0, 0, 0, 0.5);\n`;\n\nexport const PopMovieImage = styled.img`\n  width: 100%;\n  display: block;\n`;\n\nexport const PopMovieTitle = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border-top: 1px solid grey;\n  height: 64px;\n  font-size: 20px;\n  font-weight: 500;\n  color: #25202f;\n`;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  position: relative;\n  width: 100%;\n`;\n\nexport const Input = styled.input`\n  font-size: 16px;\n  padding: 8px 36px;\n  width: 280px;\n  max-width: 280px;\n  border: none;\n  border-bottom: 1px solid grey;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  position: absolute;\n  border: none;\n  top: 10px;\n  background-color: transparent;\n`;\n","import axios from 'axios';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Notiflix from 'notiflix';\nimport { TfiSearch } from 'react-icons/tfi';\nimport anonimImage from 'image/anonim_image.jpg';\nimport { Input, Form, Button } from './MoviesStyle';\nimport {\n  Container,\n  PopMoviesList,\n  PopMovieItem,\n  PopMovieImage,\n  PopMovieTitle,\n} from 'pages/Home/HomeStyle';\n\nconst API_KEY = '897e0a2614d8e23c2dbd931fea606526';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movie, setMovie] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === null) {\n      return;\n    }\n\n    const getQueryMovie = async () => {\n      try {\n        const response = await (\n          await axios.get(\n            `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`\n          )\n        ).data.results;\n\n        if (response.length === 0) {\n          Notiflix.Notify.warning('We have not movies by this title.');\n          return;\n        }\n        const data = response.map(\n          ({ id, title, original_title, poster_path }) => ({\n            id,\n            title: title || original_title,\n            poster_path,\n          })\n        );\n        setMovie(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getQueryMovie();\n  }, [query, searchParams]);\n\n  const onChange = ({ target }) => {\n    setSearchQuery(target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    let value = event.target.elements.search.value;\n    setSearchQuery(value);\n    setSearchParams({ query: value });\n    if (query && query.trim() === '') {\n      Notiflix.Notify.warning('Type title of movie.');\n      return;\n    }\n    setSearchQuery('');\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit}>\n        <Button type=\"submit\">\n          <TfiSearch />\n        </Button>\n        <Input\n          type=\"text\"\n          autoComplete=\"off\"\n          name=\"search\"\n          autoFocus\n          placeholder=\"Search movie by name...\"\n          value={searchQuery}\n          onChange={onChange}\n        ></Input>\n      </Form>\n      {movie && (\n        <PopMoviesList>\n          {movie.map(({ id, title, poster_path }) => {\n            return (\n              <PopMovieItem key={id}>\n                <Link to={`${id}`} state={{ from: location }} key={id}>\n                  <PopMovieImage\n                    src={\n                      poster_path\n                        ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                        : anonimImage\n                    }\n                    alt={title}\n                  />\n                  <PopMovieTitle>{title}</PopMovieTitle>\n                </Link>\n              </PopMovieItem>\n            );\n          })}\n        </PopMoviesList>\n      )}\n    </Container>\n  );\n};\n\nexport default Movies;\n"],"names":["Container","styled","Title","PopMoviesList","PopMovieItem","PopMovieImage","PopMovieTitle","Form","Input","Button","useState","searchQuery","setSearchQuery","movie","setMovie","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","useEffect","getQueryMovie","axios","data","results","response","length","Notiflix","map","id","title","original_title","poster_path","console","log","onSubmit","event","preventDefault","value","target","elements","search","trim","type","autoComplete","name","autoFocus","placeholder","onChange","to","state","from","src","anonimImage","alt"],"sourceRoot":""}