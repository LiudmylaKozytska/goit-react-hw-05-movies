{"version":3,"file":"static/js/961.786dc25f.chunk.js","mappings":"mUAEaA,EAAYC,EAAAA,EAAAA,IAAH,sOAWTC,EAAQD,EAAAA,EAAAA,GAAH,0GAOLE,EAAgBF,EAAAA,EAAAA,GAAH,iLAUbG,EAAeH,EAAAA,EAAAA,GAAH,wIAOZI,EAAgBJ,EAAAA,EAAAA,IAAH,2DAKbK,EAAgBL,EAAAA,EAAAA,EAAH,gO,iKCsE1B,UA/FqB,WAAO,IAAD,IACzB,GAA0BM,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KACxCC,GAAYC,EAAAA,EAAAA,MAAZD,QAyCR,OAvCAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,+HAEMC,EAAAA,EAAAA,IAAA,6CACiBJ,EADjB,oBAXf,qCASS,OAEXK,EAFW,SAcbA,EAASC,KAPXC,EAPe,EAOfA,MACAC,EARe,EAQfA,eACAC,EATe,EASfA,aACAC,EAVe,EAUfA,SACAC,EAXe,EAWfA,OACAC,EAZe,EAYfA,YACAC,EAbe,EAafA,aAGIC,EAAW,CACfP,MAAOA,GAASC,EAChBO,MAAON,EACPC,SAAUA,EACVC,OAAQA,EAAOK,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,MAC5CC,MAAM,kCAAD,OAAoCP,GACzCQ,KAAMP,EAAaQ,MAAM,KAAK,IAGhC5B,EAASqB,GAEe,IAApBT,EAASiB,QACXC,IAAAA,OAAAA,QAAwB,qCA5BT,kDA+BjBC,QAAQC,IAAR,MACAF,IAAAA,OAAAA,QAAwB,+BAhCP,0DAAH,qDAmClBpB,GACD,GAAE,CAACH,KAGF,SAAC,KAAD,UACGR,IACC,iCACE,UAAC,KAAD,CAAakC,GAAI9B,EAAS+B,QAA1B,WACE,SAAC,MAAD,KACA,SAAC,KAAD,uBAEF,UAAC,KAAD,YACE,SAAC,KAAD,CAAYC,IAAKpC,EAAM2B,MAAOU,IAAKrC,EAAMe,SACzC,UAAC,KAAD,YACE,UAAC,KAAD,WACGf,EAAMe,MADT,KACkBf,EAAM4B,KADxB,QAGA,UAAC,KAAD,YACE,SAAC,KAAD,sBACC5B,EAAMuB,UAET,SAAC,KAAD,wBACA,SAAC,KAAD,UAAmBvB,EAAMkB,YACzB,SAAC,KAAD,wBACA,SAAC,KAAD,UAAmBlB,EAAMmB,UACzB,2BACE,SAAC,KAAD,uCACA,yBACE,SAAC,KAAD,CAAae,GAAG,OAAhB,UACE,UAAC,KAAD,oBACO,SAAC,MAAD,YAIX,yBACE,SAAC,KAAD,CAAaA,GAAG,UAAhB,UACE,UAAC,KAAD,uBACU,SAAC,MAAD,kBAMlB,SAAC,EAAAI,SAAD,CAAUC,SAAS,aAAnB,UACE,SAAC,KAAD,aAOb,C,6NC3GYC,EAAmB/C,EAAAA,EAAAA,IAAH,kMAWhBgD,EAAahD,EAAAA,EAAAA,IAAH,sIAQViD,EAAiBjD,EAAAA,EAAAA,IAAH,iNAYdkD,EAAmBlD,EAAAA,EAAAA,EAAH,uFAMhBmD,EAAgBnD,EAAAA,EAAAA,KAAH,iEAKboD,GAAcpD,EAAAA,EAAAA,GAAOqD,EAAAA,GAAPrD,CAAH,8E","sources":["pages/Home/HomeStyle.jsx","pages/MovieDetails/MovieDetails.jsx","pages/MovieDetails/MovieDetailsStyle.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding: 16px;\n  margin: 12px 4px;\n  width: 100%;\n  border: 1px solid grey;\n  box-shadow: 2px 2px 5px 2px rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const Title = styled.h1`\n  margin-left: 32px;\n  font-size: 24px;\n  font-weight: 500;\n  color: #25202f;\n`;\n\nexport const PopMoviesList = styled.ul`\n  margin-top: 16px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  align-items: flex-end;\n  flex-grow: grow;\n  gap: 12px;\n`;\n\nexport const PopMovieItem = styled.li`\n  flex-grow: 1;\n  width: 200px;\n  border: 1px solid grey;\n  box-shadow: 2px 2px 5px 2px rgba(0, 0, 0, 0.5);\n`;\n\nexport const PopMovieImage = styled.img`\n  width: 100%;\n  display: block;\n`;\n\nexport const PopMovieTitle = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border-top: 1px solid grey;\n  height: 64px;\n  font-size: 20px;\n  font-weight: 500;\n  color: #25202f;\n`;\n","import axios from 'axios';\nimport { useState, useEffect, useRef, Suspense } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { BsArrowLeft, BsBoxArrowInDown } from 'react-icons/bs';\nimport Notiflix from 'notiflix';\nimport { Container, Title } from 'pages/Home/HomeStyle';\nimport {\n  MovieContainer,\n  MovieDescription,\n  MovieIdContainer,\n  MovieIdLink,\n  MovieImage,\n  MovieSpanText,\n} from './MovieDetailsStyle';\n\nconst API_KEY = '897e0a2614d8e23c2dbd931fea606526';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n  const backPage = useRef(location.state?.from ?? '/');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieById = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n        );\n\n        const {\n          title,\n          original_title,\n          vote_average,\n          overview,\n          genres,\n          poster_path,\n          release_date,\n        } = response.data;\n\n        const movieObj = {\n          title: title || original_title,\n          score: vote_average,\n          overview: overview,\n          genres: genres.map(({ name }) => name).join(', '),\n          image: `https://image.tmdb.org/t/p/w500${poster_path}`,\n          date: release_date.split('-')[0],\n        };\n\n        setMovie(movieObj);\n\n        if (response.length === 0) {\n          Notiflix.Notify.warning('There are no movies by this title');\n        }\n      } catch (error) {\n        console.log(error);\n        Notiflix.Notify.warning('This movie has not details.');\n      }\n    };\n    getMovieById();\n  }, [movieId]);\n\n  return (\n    <Container>\n      {movie && (\n        <>\n          <MovieIdLink to={backPage.current}>\n            <BsArrowLeft />\n            <MovieSpanText>Back</MovieSpanText>\n          </MovieIdLink>\n          <MovieIdContainer>\n            <MovieImage src={movie.image} alt={movie.title} />\n            <MovieContainer>\n              <Title>\n                {movie.title} ({movie.date})\n              </Title>\n              <MovieDescription>\n                <MovieSpanText>Score: </MovieSpanText>\n                {movie.score}\n              </MovieDescription>\n              <MovieSpanText>Overview</MovieSpanText>\n              <MovieDescription>{movie.overview}</MovieDescription>\n              <MovieSpanText>Genres: </MovieSpanText>\n              <MovieDescription>{movie.genres}</MovieDescription>\n              <ul>\n                <MovieSpanText>Additional information </MovieSpanText>\n                <li>\n                  <MovieIdLink to=\"cast\">\n                    <MovieSpanText>\n                      Cast <BsBoxArrowInDown />\n                    </MovieSpanText>\n                  </MovieIdLink>\n                </li>\n                <li>\n                  <MovieIdLink to=\"reviews\">\n                    <MovieSpanText>\n                      Reviews <BsBoxArrowInDown />\n                    </MovieSpanText>\n                  </MovieIdLink>\n                </li>\n              </ul>\n            </MovieContainer>\n            <Suspense fallback=\"Loading...\">\n              <Outlet />\n            </Suspense>\n          </MovieIdContainer>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default MovieDetails;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieIdContainer = styled.div`\n  @media screen and (min-width: 320px) {\n    width: 280px;\n    margin: auto;\n  }\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n    margin: 0;\n  }\n`;\nexport const MovieImage = styled.img`\n  @media screen and (min-width: 320px) {\n    width: 280px;\n    max-width: 728px;\n    display: block;\n  }\n`;\n\nexport const MovieContainer = styled.div`\n  @media screen and (min-width: 768px) {\n    margin: 12px;\n    min-width: 400px;\n    max-width: 900px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    min-width: 900px;\n  }\n`;\n\nexport const MovieDescription = styled.p`\n  font-size: 18px;\n  text-align: justify;\n  margin: 12px 0;\n`;\n\nexport const MovieSpanText = styled.span`\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const MovieIdLink = styled(Link)`\n  display: block;\n  color: black;\n  margin: 12px 0;\n`;\n"],"names":["Container","styled","Title","PopMoviesList","PopMovieItem","PopMovieImage","PopMovieTitle","useState","movie","setMovie","location","useLocation","backPage","useRef","state","from","movieId","useParams","useEffect","getMovieById","axios","response","data","title","original_title","vote_average","overview","genres","poster_path","release_date","movieObj","score","map","name","join","image","date","split","length","Notiflix","console","log","to","current","src","alt","Suspense","fallback","MovieIdContainer","MovieImage","MovieContainer","MovieDescription","MovieSpanText","MovieIdLink","Link"],"sourceRoot":""}